#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bonita_Kani_Korso ‚Äî Telegram-–±–æ—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞ —â–µ–Ω–∫–∞:
- –°–æ–Ω (–∑–∞—Å—ã–ø–∞–Ω–∏–µ/–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ)
- –ï–¥–∞, –ò–≥—Ä—ã, –ü—Ä–æ–≥—É–ª–∫–∞, –ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞
- –ü–æ—Å—Ç—Ñ–∞–∫—Ç—É–º-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å —Ä—É—á–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –ø—Ä–æ–≥—É–ª–æ–∫
- –£—á—ë—Ç –Ω–∞—á–∞–ª–∞/–∫–æ–Ω—Ü–∞ –ø—Ä–æ–≥—É–ª–æ–∫ –∏ —Å–Ω–∞
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 2/5/10 –¥–Ω–µ–π —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –ø–æ –ø—Ä–∏—ë–º–∞–º –ø–∏—â–∏
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏—ë–º–æ–≤ –µ–¥—ã
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ä–µ–∂–∏–º—É –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±—ç–∫–∞–ø—ã
- –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–∞ >10 –ú–ë –∏ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—à–µ 120 –¥–Ω–µ–π
- –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ —á–µ—Ä–µ–∑ .env
"""

import os
import json
from datetime import datetime, timedelta, time
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ALLOWED_USER_IDS = [
    int(x) for x in os.getenv("ALLOWED_USER_IDS", "").split(",") if x.strip().isdigit()
]

# === –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º ===
LOG_FILE      = "activity_log.json"
SETTINGS_FILE = "settings.json"
COMMANDS_FILE = "commands.json"

# === –î–µ–π—Å—Ç–≤–∏—è –∏ —ç–º–æ–¥–∑–∏ ===
ALL_ACTIONS = ["–°–æ–Ω", "–ï–¥–∞", "–ò–≥—Ä—ã", "–ü—Ä–æ–≥—É–ª–∫–∞", "–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞"]
VALID_ACTIONS = [
    ("üçΩÔ∏è", "–ï–¥–∞"),
    ("üåø", "–ò–≥—Ä—ã"),
    ("üå≥", "–ü—Ä–æ–≥—É–ª–∫–∞"),
    ("üßª", "–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞"),
]
EMOJI_BY_ACTION = {
    "–°–æ–Ω": "üõå",
    "–ï–¥–∞": "üçΩÔ∏è",
    "–ò–≥—Ä—ã": "üåø",
    "–ü—Ä–æ–≥—É–ª–∫–∞": "üå≥",
    "–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞": "üßª",
}

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ===
default_settings = {
    "feedings_per_day": 1,
    "plays_per_day":   1,
    "walks_per_day":   1,
    "sleeps_per_day":  1,
    "schedule": {
        "breakfast":   "08:00",
        "lunch":       "13:00",
        "dinner":      "18:00",
        "late_dinner": "23:00"
    }
}

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===
def load_data(fn, default):
    if os.path.exists(fn):
        try:
            with open(fn, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            return default
    return default

def save_data(fn, data):
    with open(fn, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

settings = load_data(SETTINGS_FILE, default_settings)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
MAIN_MENU = ReplyKeyboardMarkup([
    ["üõå –°–æ–Ω",      "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é"],
    ["üçΩÔ∏è –ï–¥–∞",     "üåø –ò–≥—Ä—ã"],
    ["üå≥ –ü—Ä–æ–≥—É–ª–∫–∞", "üßª –ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞"],
    ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞","‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
    ["üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è"],
], resize_keyboard=True)

STATS_CHOICES = ReplyKeyboardMarkup([
    [KeyboardButton("2 –¥–Ω—è")],
    [KeyboardButton("5 –¥–Ω–µ–π")],
    [KeyboardButton("10 –¥–Ω–µ–π")],
], resize_keyboard=True)

SETTINGS_MENU = ReplyKeyboardMarkup([
    [KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
    [KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏")],
], resize_keyboard=True)

# === –†–æ—Ç–∞—Ü–∏—è –∏ –æ–±—Ä–µ–∑–∫–∞ –ª–æ–≥–∞ ===
def trim_old(records, days=120):
    cutoff = datetime.now() - timedelta(days=days)
    return [
        e for e in records
        if datetime.strptime(e["time"], "%Y-%m-%d %H:%M:%S") >= cutoff
    ]

def check_rotation():
    if os.path.exists(LOG_FILE) and os.path.getsize(LOG_FILE) > 10*1024*1024:
        log = load_data(LOG_FILE, [])
        save_data(LOG_FILE, trim_old(log, days=20))

# === –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
user_states   = {}  # user_id -> {"mode":str,"step":int,"data":{}}
active_walks  = {}  # user_id -> {"start":str}
active_sleeps = {}  # user_id -> {"start":str}

# === –ü–æ–º–æ—â–Ω–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
def average_time(times):
    if not times:
        return "‚Äî"
    total = sum(
        dt.hour*60 + dt.minute
        for dt in (datetime.strptime(t, "%Y-%m-%d %H:%M:%S") for t in times)
    )
    avg = total // len(times)
    return f"{avg//60:02d}:{avg%60:02d}"

def get_stats(log, days=2):
    cutoff  = datetime.now() - timedelta(days=days)
    entries = [
        e for e in log
        if datetime.strptime(e["time"], "%Y-%m-%d %H:%M:%S") >= cutoff
    ]
    by_act = {act: {} for act in ALL_ACTIONS}
    for e in entries:
        d = e["time"][:10]
        by_act.setdefault(e["action"], {}).setdefault(d, []).append(e["time"])
    lines = [f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π:"]
    per_day = settings.get("feedings_per_day", 1)
    for action, daymap in by_act.items():
        # –µ—Å–ª–∏ –µ–¥–∞ ‚Äî —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ feedings_per_day
        if action == "–ï–¥–∞" and per_day > 1:
            lines.append(f"\nüçΩÔ∏è {action}:")
            for idx in range(per_day):
                times = []
                for lst in daymap.values():
                    sorted_lst = sorted(lst)
                    if len(sorted_lst) > idx:
                        times.append(sorted_lst[idx])
                lines.append(f"  #{idx+1}: {len(times)} —Ä–∞–∑, —Å—Ä. –≤ {average_time(times)}")
        else:
            # –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            all_times = [t for lst in daymap.values() for t in lst]
            emoji = EMOJI_BY_ACTION.get(action, "")
            lines.append(
                f"{emoji} {action}: {len(all_times)} —Ä–∞–∑, —Å—Ä. –≤ {average_time(all_times)}"
            )
    return "\n".join(lines)

# === –ü–æ—à–∞–≥–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ===
schedule_order = ["breakfast", "lunch", "dinner", "late_dinner"]
schedule_labels = {
    "breakfast":   "–≤—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞–∫–∞",
    "lunch":       "–≤—Ä–µ–º—è –æ–±–µ–¥–∞",
    "dinner":      "–≤—Ä–µ–º—è —É–∂–∏–Ω–∞",
    "late_dinner": "–≤—Ä–µ–º—è –ø–æ–∑–¥–Ω–µ–≥–æ —É–∂–∏–Ω–∞"
}


# === Handlers ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in ALLOWED_USER_IDS:
        return await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª–µ–∂—É –∑–∞ —Ä–µ–∂–∏–º–æ–º —â–µ–Ω–∫–∞ üê∂",
                                    reply_markup=MAIN_MENU)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid  = update.effective_user.id
    if uid not in ALLOWED_USER_IDS:
        return await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    text    = update.message.text.strip()
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log     = load_data(LOG_FILE, [])

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
    if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:", reply_markup=SETTINGS_MENU)

    # 1) –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        sched = settings.get("schedule", {})
        msg = "\n".join(f"{k}: {v}" for k, v in sched.items())
        user_states[uid] = {"mode": "schedule", "step": 0, "data": {}}
        return await update.message.reply_text(
            f"–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{msg}\n\n–í–≤–µ–¥–∏ {schedule_labels[schedule_order[0]]} (–ß–ß:–ú–ú):"
        )
    if uid in user_states and user_states[uid]["mode"] == "schedule":
        state = user_states[uid]
        step  = state["step"]
        key   = schedule_order[step]
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        try:
            datetime.strptime(text, "%H:%M")
        except ValueError:
            return await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω—É–∂–Ω–æ –ß–ß:–ú–ú")
        state["data"][key] = text
        step += 1
        if step < len(schedule_order):
            state["step"] = step
            next_key = schedule_order[step]
            return await update.message.reply_text(
                f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ {schedule_labels[next_key]} (–ß–ß:–ú–ú):"
            )
        # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        settings["schedule"] = state["data"]
        save_data(SETTINGS_FILE, settings)
        user_states.pop(uid)
        return await update.message.reply_text("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=MAIN_MENU)

    # 2) –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏
    if text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏":
        user_states[uid] = {"mode": "set_feedings", "step": 0}
        return await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ:")

    if uid in user_states and user_states[uid]["mode"] == "set_feedings":
        try:
            n = int(text)
            settings["feedings_per_day"] = n
            save_data(SETTINGS_FILE, settings)
            user_states.pop(uid)
            return await update.message.reply_text(
                f"‚úÖ –ö–æ–ª-–≤–æ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {n} –≤ –¥–µ–Ω—å", reply_markup=MAIN_MENU
            )
        except ValueError:
            return await update.message.reply_text("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

    # --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥:", reply_markup=STATS_CHOICES)
    if text in ("2 –¥–Ω—è", "5 –¥–Ω–µ–π", "10 –¥–Ω–µ–π"):
        days = int(text.split()[0])
        return await update.message.reply_text(get_stats(log, days), reply_markup=MAIN_MENU)

    # --- –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è ---
    if text == "üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è":
        for fn in (LOG_FILE, SETTINGS_FILE, COMMANDS_FILE):
            if os.path.exists(fn):
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=open(fn, "rb")
                )
        return

    # --- –ü–æ—Å—Ç—Ñ–∞–∫—Ç—É–º –∏ –Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü –ø—Ä–æ–≥—É–ª–æ–∫ –∏ —Å–Ω–∞ ---
    # (–∑–¥–µ—Å—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è–º –ø–æ—Å—Ç—Ñ–∞–∫—Ç—É–º–∞, sleep –∏ walk)

    # --- –ü—Ä–æ—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ---
    for emo, act in VALID_ACTIONS:
        if text == f"{emo} {act}":
            check_rotation()
            log.append({"action": act, "time": now_str, "user": uid})
            save_data(LOG_FILE, trim_old(log, days=120))
            return await update.message.reply_text(f"{emo} {act} –∑–∞–ø–∏—Å–∞–Ω–æ", reply_markup=MAIN_MENU)

    # --- Fallback ---
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=MAIN_MENU)

# === –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ JobQueue ===
async def send_backup(context: ContextTypes.DEFAULT_TYPE):
    for uid in ALLOWED_USER_IDS:
        for fn in (LOG_FILE, SETTINGS_FILE, COMMANDS_FILE):
            if os.path.exists(fn):
                await context.bot.send_document(chat_id=uid, document=open(fn, "rb"),
                                                caption="üì¶ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è")

async def check_reminders(context: ContextTypes.DEFAULT_TYPE):
    log   = load_data(LOG_FILE, [])
    today = datetime.now().strftime("%Y-%m-%d")
    for act in ("–ï–¥–∞", "–ü—Ä–æ–≥—É–ª–∫–∞"):
        avg = get_average_time(log, act)
        if not avg:
            continue
        h, m = avg
        target = datetime.strptime(f"{today} {h:02d}:{m:02d}", "%Y-%m-%d %H:%M")
        delta = (datetime.now() - target).total_seconds() / 60
        if 6 <= delta <= 10 and not any(e["action"] == act and e["time"].startswith(today) for e in log):
            txt = f"{EMOJI_BY_ACTION[act]} –ü–æ—Ä–∞ {act.lower()}!\n–°—Ä. {h:02d}:{m:02d}"
            for uid in ALLOWED_USER_IDS:
                await context.bot.send_message(chat_id=uid, text=txt)

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
def main():
    if not BOT_TOKEN or not ALLOWED_USER_IDS:
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –∏ ALLOWED_USER_IDS –≤ .env")
        return
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    jq = app.job_queue
    jq.run_daily(send_backup, time=time(hour=23, minute=59))
    jq.run_repeating(check_reminders, interval=300, first=0)
    print("‚úÖ Bonita_Kani_Korso –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()


if __name__ == "__main__":
    main()
