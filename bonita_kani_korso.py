#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
from datetime import datetime, timedelta, time
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# === Load environment ===
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ALLOWED_USER_IDS = [
    int(uid) for uid in os.getenv("ALLOWED_USER_IDS", "").split(",")
    if uid.strip().isdigit()
]

# === File paths ===
LOG_FILE = "activity_log.json"
SETTINGS_FILE = "settings.json"
COMMANDS_FILE = "commands.json"

# === Actions and emojis ===
ALL_ACTIONS = ["–°–æ–Ω", "–ï–¥–∞", "–ò–≥—Ä—ã", "–ü—Ä–æ–≥—É–ª–∫–∞", "–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞"]
VALID_ACTIONS = [
    ("üçΩÔ∏è", "–ï–¥–∞"),
    ("üåø", "–ò–≥—Ä—ã"),
    ("üå≥", "–ü—Ä–æ–≥—É–ª–∫–∞"),
    ("üßª", "–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞"),
]
EMOJI_BY_ACTION = {
    "–°–æ–Ω": "üõå",
    "–ï–¥–∞": "üçΩÔ∏è",
    "–ò–≥—Ä—ã": "üåø",
    "–ü—Ä–æ–≥—É–ª–∫–∞": "üå≥",
    "–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞": "üßª",
}

# === Keyboards ===
MAIN_MENU = ReplyKeyboardMarkup([
    ["üõå –°–æ–Ω", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é"],
    ["üçΩÔ∏è –ï–¥–∞", "üåø –ò–≥—Ä—ã"],
    ["üå≥ –ü—Ä–æ–≥—É–ª–∫–∞", "üßª –ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞"],
    ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è"],
], resize_keyboard=True)

STATS_CHOICES = ReplyKeyboardMarkup([
    [KeyboardButton("2 –¥–Ω—è")],
    [KeyboardButton("5 –¥–Ω–µ–π")],
    [KeyboardButton("10 –¥–Ω–µ–π")],
], resize_keyboard=True)


# === Storage helpers ===
def load_data(filename, default):
    if os.path.exists(filename):
        try:
            with open(filename, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            print(f"[‚ö†] Corrupted {filename}, resetting.")
            return default
    return default

def save_data(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def trim_old_records(records, keep_days=120):
    cutoff = datetime.now() - timedelta(days=keep_days)
    return [
        e for e in records
        if datetime.strptime(e["time"], "%Y-%m-%d %H:%M:%S") >= cutoff
    ]

def check_log_rotation():
    max_size = 10 * 1024 * 1024  # 10 MB
    if os.path.exists(LOG_FILE) and os.path.getsize(LOG_FILE) > max_size:
        log = load_data(LOG_FILE, [])
        trimmed = trim_old_records(log, keep_days=20)
        save_data(LOG_FILE, trimmed)


# === In-memory state ===
user_states = {}    # user_id -> {"mode":"postfact","step":int,"data":{}}
active_walks = {}   # user_id -> {"start": "YYYY-MM-DD HH:MM:SS"}
active_sleeps = {}  # user_id -> {"start": "YYYY-MM-DD HH:MM:SS"}


# === Statistics helpers ===
def average_time(times):
    if not times:
        return "‚Äî"
    total = sum(
        dt.hour * 60 + dt.minute
        for dt in (datetime.strptime(t, "%Y-%m-%d %H:%M:%S") for t in times)
    )
    avg = total // len(times)
    return f"{avg // 60:02d}:{avg % 60:02d}"

def get_stats(log, days=2):
    cutoff = datetime.now() - timedelta(days=days)
    filtered = [
        e for e in log
        if datetime.strptime(e["time"], "%Y-%m-%d %H:%M:%S") >= cutoff
    ]
    stats = {}
    for e in filtered:
        stats.setdefault(e["action"], []).append(e["time"])
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π:\n"
    for action, times in stats.items():
        text += (
            f"{EMOJI_BY_ACTION.get(action,'')} {action}: "
            f"{len(times)} —Ä–∞–∑(–∞), –≤ —Å—Ä–µ–¥–Ω–µ–º –≤ {average_time(times)}\n"
        )
    return text

def get_average_time(log, action, days=5):
    cutoff = datetime.now() - timedelta(days=days)
    times = [
        datetime.strptime(e["time"], "%Y-%m-%d %H:%M:%S")
        for e in log
        if e["action"] == action
        and datetime.strptime(e["time"], "%Y-%m-%d %H:%M:%S") >= cutoff
    ]
    if not times:
        return None
    minutes = sum(t.hour * 60 + t.minute for t in times) // len(times)
    return (minutes // 60, minutes % 60)


# === Handlers ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in ALLOWED_USER_IDS:
        return await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª–µ–∂—É –∑–∞ —Ä–µ–∂–∏–º–æ–º —â–µ–Ω–∫–∞ üê∂", reply_markup=MAIN_MENU
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USER_IDS:
        return await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    text = update.message.text.strip()
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log = load_data(LOG_FILE, [])

    # --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥:", reply_markup=STATS_CHOICES)
    if text in ("2 –¥–Ω—è", "5 –¥–Ω–µ–π", "10 –¥–Ω–µ–π"):
        days = int(text.split()[0])
        return await update.message.reply_text(get_stats(log, days), reply_markup=MAIN_MENU)

    # --- –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è ---
    if text == "üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è":
        for fn in (LOG_FILE, SETTINGS_FILE, COMMANDS_FILE):
            if os.path.exists(fn):
                await context.bot.send_document(chat_id=update.effective_chat.id,
                                                document=open(fn, "rb"))
        return

    # --- –ü–æ—Å—Ç—Ñ–∞–∫—Ç—É–º-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ---
    if user_id in user_states:
        state = user_states[user_id]
        action = state["data"].get("action")
        # –®–∞–≥ 1: –ø–æ–ª—É—á–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ
        if state["step"] == 0:
            if text not in ALL_ACTIONS:
                user_states.pop(user_id)
                return await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", reply_markup=MAIN_MENU)
            state["data"]["action"] = text
            state["step"] = 1
            await update.message.reply_text("–í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è: –î–î.MM.YYYY –ß–ß:–ú–ú")
            return
        # –®–∞–≥ 2: –ø–æ–ª—É—á–∏–ª–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        if state["step"] == 1:
            try:
                dt = datetime.strptime(text, "%d.%m.%Y %H:%M")
            except ValueError:
                return await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            state["data"]["time"] = dt
            # –µ—Å–ª–∏ –ø—Ä–æ–≥—É–ª–∫–∞ ‚Äî –ø—Ä–æ—Å–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if action in ("–ü—Ä–æ–≥—É–ª–∫–∞", "–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞"):
                state["step"] = 2
                return await update.message.reply_text(
                    "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö –∏–ª–∏ –ß–ß:–ú–ú"
                )
            # –∏–Ω–∞—á–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É
            log.append({
                "action": action,
                "time": dt.strftime("%Y-%m-%d %H:%M:%S"),
                "user": user_id
            })
            save_data(LOG_FILE, trim_old_records(log))
            user_states.pop(user_id)
            return await update.message.reply_text(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {action} –≤ {dt.strftime('%Y-%m-%d %H:%M:%S')}",
                reply_markup=MAIN_MENU
            )
        # –®–∞–≥ 3: –ø–æ–ª—É—á–∏–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if state["step"] == 2:
            duration = text
            # –ø–∞—Ä—Å–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if ":" in duration:
                h, m = duration.split(":", 1)
                mins = int(h) * 60 + int(m)
            else:
                mins = int(duration)
            start_dt = state["data"]["time"]
            end_dt = start_dt + timedelta(minutes=mins)
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–≤–µ –º–µ—Ç–∫–∏
            log.extend([
                {"action": action, "time": start_dt.strftime("%Y-%m-%d %H:%M:%S"),
                 "user": user_id, "note": "start"},
                {"action": action, "time": end_dt.strftime("%Y-%m-%d %H:%M:%S"),
                 "user": user_id, "note": "end"},
            ])
            save_data(LOG_FILE, trim_old_records(log))
            user_states.pop(user_id)
            return await update.message.reply_text(
                f"‚úÖ {action} —Å {start_dt.strftime('%H:%M')} –¥–æ {end_dt.strftime('%H:%M')}",
                reply_markup=MAIN_MENU
            )

    # –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç—Ñ–∞–∫—Ç—É–º
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é":
        user_states[user_id] = {"mode": "postfact", "step": 0, "data": {}}
        actions_list = "\n".join(f"‚Ä¢ {a}" for a in ALL_ACTIONS)
        return await update.message.reply_text(f"–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?\n{actions_list}")

    # --- –°–æ–Ω: –Ω–∞—á–∞–ª–æ/–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ ---
    if text == "üõå –°–æ–Ω":
        if user_id in active_sleeps:
            start_str = active_sleeps.pop(user_id)["start"]
            dt0 = datetime.strptime(start_str, "%Y-%m-%d %H:%M:%S")
            dt1 = datetime.now()
            duration = dt1 - dt0
            hours, rem = divmod(duration.seconds, 3600)
            mins = rem // 60
            log.extend([
                {"action": "–°–æ–Ω", "time": start_str, "user": user_id, "note": "start"},
                {"action": "–°–æ–Ω", "time": dt1.strftime("%Y-%m-%d %H:%M:%S"),
                 "user": user_id, "note": "end"},
            ])
            save_data(LOG_FILE, trim_old_records(log))
            return await update.message.reply_text(
                f"üò¥ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ: —Å–æ–Ω –¥–ª–∏–ª—Å—è {hours}—á {mins}–º", reply_markup=MAIN_MENU
            )
        else:
            active_sleeps[user_id] = {"start": now_str}
            return await update.message.reply_text("üò¥ –ó–∞—Å—ã–ø–∞–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ.", reply_markup=MAIN_MENU)

    # --- –ü—Ä–æ–≥—É–ª–∫–∞: –Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü ---
    if text in ("üå≥ –ü—Ä–æ–≥—É–ª–∫–∞", "üßª –ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞"):
        action = text.split()[1]
        if user_id in active_walks:
            start_str = active_walks.pop(user_id)["start"]
            dt0 = datetime.strptime(start_str, "%Y-%m-%d %H:%M:%S")
            dt1 = datetime.now()
            duration = dt1 - dt0
            hours, rem = divmod(duration.seconds, 3600)
            mins = rem // 60
            log.extend([
                {"action": action, "time": start_str, "user": user_id, "note": "start"},
                {"action": action, "time": dt1.strftime("%Y-%m-%d %H:%M:%S"),
                 "user": user_id, "note": "end"},
            ])
            save_data(LOG_FILE, trim_old_records(log))
            return await update.message.reply_text(
                f"üö∂ {action} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {hours}—á {mins}–º", reply_markup=MAIN_MENU
            )
        else:
            active_walks[user_id] = {"start": now_str}
            return await update.message.reply_text(
                f"üö∂ {action} –Ω–∞—á–∞–ª–∞—Å—å.", reply_markup=MAIN_MENU
            )

    # --- –ü—Ä–æ—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ---
    for emoji, action in VALID_ACTIONS:
        if text == f"{emoji} {action}":
            check_log_rotation()
            log.append({"action": action, "time": now_str, "user": user_id})
            save_data(LOG_FILE, trim_old_records(log))
            return await update.message.reply_text(
                f"‚úÖ {emoji} {action} –≤ {now_str}", reply_markup=MAIN_MENU
            )

    # --- Fallback ---
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=MAIN_MENU)


# === Periodic tasks via JobQueue ===
async def send_backup(context: ContextTypes.DEFAULT_TYPE):
    for uid in ALLOWED_USER_IDS:
        for fn in (LOG_FILE, SETTINGS_FILE, COMMANDS_FILE):
            if os.path.exists(fn):
                await context.bot.send_document(chat_id=uid,
                                                document=open(fn, "rb"),
                                                caption="üì¶ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è")

async def check_reminders(context: ContextTypes.DEFAULT_TYPE):
    log = load_data(LOG_FILE, [])
    today = datetime.now().strftime("%Y-%m-%d")
    for action in ("–ï–¥–∞", "–ü—Ä–æ–≥—É–ª–∫–∞"):
        avg = get_average_time(log, action)
        if not avg:
            continue
        h, m = avg
        target = datetime.strptime(f"{today} {h:02d}:{m:02d}", "%Y-%m-%d %H:%M")
        now = datetime.now()
        delta = (now - target).total_seconds() / 60
        if 6 <= delta <= 10 and not any(
            e["action"] == action and e["time"].startswith(today) for e in log
        ):
            text = (
                f"{EMOJI_BY_ACTION[action]} –ü–æ—Ä–∞ {action.lower()}!\n"
                f"–û–±—ã—á–Ω–æ –≤ {h:02d}:{m:02d}, —Å–µ–π—á–∞—Å {now.strftime('%H:%M')}"
            )
            for uid in ALLOWED_USER_IDS:
                await context.bot.send_message(chat_id=uid, text=text)


# === Entry point ===
def main():
    if not BOT_TOKEN or not ALLOWED_USER_IDS:
        print("‚ùå TELEGRAM_BOT_TOKEN –∏ ALLOWED_USER_IDS –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env")
        return

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # Handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Schedule jobs
    jq = app.job_queue
    jq.run_daily(send_backup, time=time(hour=23, minute=59))
    jq.run_repeating(check_reminders, interval=300, first=0)

    print("‚úÖ Bonita_Kani_Korso –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()


if __name__ == "__main__":
    main()
