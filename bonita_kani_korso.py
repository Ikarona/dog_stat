#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bonita_Kani_Korso ‚Äî Telegram-–±–æ—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞ —â–µ–Ω–∫–∞:
- –°–æ–Ω (–∑–∞—Å—ã–ø–∞–Ω–∏–µ/–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ)
- –î–µ–π—Å—Ç–≤–∏—è: –ï–¥–∞, –ò–≥—Ä—ã, –ü—Ä–æ–≥—É–ª–∫–∞, –ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞
- –ü–æ—Å—Ç—Ñ–∞–∫—Ç—É–º-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
- –†—É—á–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—É–ª–æ–∫
- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–ø–∏—Å–µ–π –ø–æ –¥–µ–π—Å—Ç–≤–∏—é
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 2/5/10 –¥–Ω–µ–π:
    ‚Ä¢ –ï–¥–∞ ‚Äî –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω, –ø–æ–∑–¥–Ω–∏–π —É–∂–∏–Ω
    ‚Ä¢ –û—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –æ–±—â–µ–µ —á–∏—Å–ª–æ –∏ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
    ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏
    ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:
    ‚Ä¢ –ï–¥–∞ ‚Äî –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏—ë–º–∞
    ‚Ä¢ –ü—Ä–æ–≥—É–ª–∫–∞ ‚Äî –∑–∞ 1 —á 10 –º–∏–Ω –¥–æ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏—ë–º–∞
    ‚Ä¢ –ë–∏–æ-–≤—ã—Ö–æ–¥ ‚Äî —á–µ—Ä–µ–∑ 4 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ ¬´–ï–¥–∞¬ª
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±—ç–∫–∞–ø—ã (23:59), —Ä–æ—Ç–∞—Ü–∏—è –ª–æ–≥–∞ (>10 –ú–ë), –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—à–µ 120 –¥–Ω–µ–π
- –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ —á–µ—Ä–µ–∑ `.env`
"""

import os, json
from datetime import datetime, date, timedelta, time
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ALLOWED_USER_IDS = [
    int(x) for x in os.getenv("ALLOWED_USER_IDS", "").split(",")
    if x.strip().isdigit()
]

LOG_FILE      = "activity_log.json"
SETTINGS_FILE = "settings.json"
COMMANDS_FILE = "commands.json"

ALL_ACTIONS    = ["–°–æ–Ω", "–ï–¥–∞", "–ò–≥—Ä—ã", "–ü—Ä–æ–≥—É–ª–∫–∞", "–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞"]
VALID_ACTIONS  = [("üçΩÔ∏è","–ï–¥–∞"),("üåø","–ò–≥—Ä—ã"),("üå≥","–ü—Ä–æ–≥—É–ª–∫–∞"),("üßª","–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞")]
EMOJI_BY_ACTION= {"–°–æ–Ω":"üõå","–ï–¥–∞":"üçΩÔ∏è","–ò–≥—Ä—ã":"üåø","–ü—Ä–æ–≥—É–ª–∫–∞":"üå≥","–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞":"üßª"}
CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"

MAIN_MENU = ReplyKeyboardMarkup([
    ["üõå –°–æ–Ω", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"],
    ["üçΩÔ∏è –ï–¥–∞", "üåø –ò–≥—Ä—ã", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
    ["üå≥ –ü—Ä–æ–≥—É–ª–∫–∞", "üßª –ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
    ["üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", CANCEL]
], resize_keyboard=True)

STATS_CHOICES = ReplyKeyboardMarkup([
    [KeyboardButton("2 –¥–Ω—è")],
    [KeyboardButton("5 –¥–Ω–µ–π")],
    [KeyboardButton("10 –¥–Ω–µ–π")],
    [KeyboardButton(CANCEL)]
], resize_keyboard=True)

SETTINGS_MENU = ReplyKeyboardMarkup([
    [KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
     KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏")],
    [KeyboardButton(CANCEL)]
], resize_keyboard=True)

default_settings = {
    "feedings_per_day": 1,
    "schedule": {
        "breakfast":   "08:00",
        "lunch":       "13:00",
        "dinner":      "18:00",
        "late_dinner": "23:00"
    }
}

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def load_data(fn, default):
    if os.path.exists(fn):
        try:
            with open(fn, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            return default
    return default

def save_data(fn, data):
    with open(fn, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

settings = load_data(SETTINGS_FILE, default_settings)

def trim_old(records, days=120):
    cutoff = datetime.now() - timedelta(days=days)
    return [e for e in records
            if datetime.strptime(e["time"], "%Y-%m-%d %H:%M:%S") >= cutoff]

def check_rotation():
    if os.path.exists(LOG_FILE) and os.path.getsize(LOG_FILE) > 10*1024*1024:
        log = load_data(LOG_FILE, [])
        save_data(LOG_FILE, trim_old(log, days=20))

def average_time(times):
    if not times:
        return "‚Äî"
    total = sum(
        dt.hour*60 + dt.minute
        for dt in (datetime.strptime(t, "%Y-%m-%d %H:%M:%S")
                   for t in times)
    )
    avg = total // len(times)
    return f"{avg//60:02d}:{avg%60:02d}"

def list_last_entries(log, action, limit=10):
    entries = [e for e in log if e["action"] == action]
    entries.sort(key=lambda e: e["time"], reverse=True)
    return entries[:limit]

# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
def get_stats(log, days=2):
    cutoff = datetime.now() - timedelta(days=days)
    entries = [e for e in log
               if datetime.strptime(e["time"], "%Y-%m-%d %H:%M:%S") >= cutoff]

    # 1) –ï–¥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    sched = settings["schedule"]
    sch_t = {k: datetime.strptime(v, "%H:%M").time()
            for k,v in sched.items()}
    groups = {"breakfast": [], "lunch": [], "dinner": [], "late_dinner": []}
    for e in entries:
        if e["action"] != "–ï–¥–∞": continue
        t = datetime.strptime(e["time"], "%Y-%m-%d %H:%M:%S").time()
        if t < sch_t["lunch"]:
            groups["breakfast"].append(e["time"])
        elif t < sch_t["dinner"]:
            groups["lunch"].append(e["time"])
        elif t < sch_t["late_dinner"]:
            groups["dinner"].append(e["time"])
        else:
            groups["late_dinner"].append(e["time"])

    lines = [f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π:"]
    labels = {"breakfast":"–ó–∞–≤—Ç—Ä–∞–∫","lunch":"–û–±–µ–¥",
              "dinner":"–£–∂–∏–Ω","late_dinner":"–ü–æ–∑–¥–Ω–∏–π —É–∂–∏–Ω"}
    lines.append("üçΩÔ∏è –ï–¥–∞:")
    for key in ("breakfast","lunch","dinner","late_dinner"):
        times = groups[key]
        lines.append(
            f"  ‚Ä¢ {labels[key]}: {len(times)} —Ä–∞–∑, —Å—Ä. –≤ {average_time(times)}"
        )

    # 2) –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    for action in ("–°–æ–Ω","–ò–≥—Ä—ã","–ü—Ä–æ–≥—É–ª–∫–∞","–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞"):
        times = [e["time"] for e in entries if e["action"] == action]
        lines.append("")
        lines.append(
            f"{EMOJI_BY_ACTION[action]} {action}: {len(times)} —Ä–∞–∑, —Å—Ä. –≤ {average_time(times)}"
        )

    return "\n".join(lines)

# === –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ===
async def send_backup(context: ContextTypes.DEFAULT_TYPE):
    for uid in ALLOWED_USER_IDS:
        for fn in (LOG_FILE, SETTINGS_FILE, COMMANDS_FILE):
            if os.path.exists(fn):
                await context.bot.send_document(
                    chat_id=uid,
                    document=open(fn, "rb"),
                    caption="üì¶ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è"
                )

async def send_eat_reminder(context: ContextTypes.DEFAULT_TYPE):
    for uid in ALLOWED_USER_IDS:
        await context.bot.send_message(
            chat_id=uid,
            text="üçΩÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç ‚Äî –ø—Ä–∏—ë–º –ø–∏—â–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."
        )

async def send_walk_reminder(context: ContextTypes.DEFAULT_TYPE):
    for uid in ALLOWED_USER_IDS:
        await context.bot.send_message(
            chat_id=uid,
            text="üö∂ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 1 —á 10 –º–∏–Ω ‚Äî –ø—Ä–æ–≥—É–ª–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–∏—ë–º–æ–º –ø–∏—â–∏."
        )

async def send_bio_reminder(context: ContextTypes.DEFAULT_TYPE):
    user_id = context.job.data["user_id"]
    await context.bot.send_message(
        chat_id=user_id,
        text="üßª –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 4 –º–∏–Ω—É—Ç—ã ‚Äî –±–∏–æ-–≤—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –µ–¥—ã."
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in ALLOWED_USER_IDS:
        return await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª–µ–∂—É –∑–∞ —Ä–µ–∂–∏–º–æ–º —â–µ–Ω–∫–∞ üê∂",
        reply_markup=MAIN_MENU
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid     = update.effective_user.id
    if uid not in ALLOWED_USER_IDS:
        return await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    text    = update.message.text.strip()
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log     = load_data(LOG_FILE, [])

    # –û—Ç–º–µ–Ω–∞
    if text == CANCEL and uid in user_states:
        user_states.pop(uid)
        return await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=MAIN_MENU)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥:", reply_markup=STATS_CHOICES
        )
    if text in ("2 –¥–Ω—è", "5 –¥–Ω–µ–π", "10 –¥–Ω–µ–π"):
        days = int(text.split()[0])
        return await update.message.reply_text(
            get_stats(log, days), reply_markup=MAIN_MENU
        )

    # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
    if text == "üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è":
        for fn in (LOG_FILE, SETTINGS_FILE, COMMANDS_FILE):
            if os.path.exists(fn):
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=open(fn, "rb")
                )
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
    if uid in user_states and user_states[uid]["mode"] == "postfact":
        state = user_states[uid]
        step  = state["step"]
        data  = state["data"]
        # –®–∞–≥ 0: –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
        if step == 0:
            if text not in ALL_ACTIONS:
                user_states.pop(uid)
                return await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=MAIN_MENU)
            data["action"] = text
            state["step"] = 1
            return await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: –î–î.MM.YYYY –ß–ß:–ú–ú",
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton(CANCEL)]], resize_keyboard=True
                )
            )
        # –®–∞–≥ 1: –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ ¬´–í–≤–µ—Å—Ç–∏ –∫–æ–Ω–µ—Ü¬ª
        if step == 1:
            if text == "–í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞":
                state["step"] = 3
                return await update.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞: –î–î.MM.YYYY –ß–ß:–ú–ú",
                    reply_markup=ReplyKeyboardMarkup(
                        [[KeyboardButton(CANCEL)]], resize_keyboard=True
                    )
                )
            try:
                dt0 = datetime.strptime(text, "%d.%m.%Y %H:%M")
            except ValueError:
                return await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            data["start"] = dt0
            if data["action"] in ("–ü—Ä–æ–≥—É–ª–∫–∞", "–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞"):
                state["step"] = 2
                return await update.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö:",
                    reply_markup=ReplyKeyboardMarkup(
                        [[KeyboardButton(CANCEL)]], resize_keyboard=True
                    )
                )
            # –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—å –±–µ–∑ –∫–æ–Ω—Ü–∞
            log.append({
                "action": data["action"],
                "time": dt0.strftime("%Y-%m-%d %H:%M:%S"),
                "user": uid
            })
            save_data(LOG_FILE, trim_old(log))
            user_states.pop(uid)
            return await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ.", reply_markup=MAIN_MENU)
        # –®–∞–≥ 2: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏
        if step == 2:
            try:
                mins = int(text)
            except ValueError:
                return await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")
            dt0 = data["start"]
            dt1 = dt0 + timedelta(minutes=mins)
            log.extend([
                {"action": data["action"], "time": dt0.strftime("%Y-%m-%d %H:%M:%S"),
                 "user": uid, "note": "start"},
                {"action": data["action"], "time": dt1.strftime("%Y-%m-%d %H:%M:%S"),
                 "user": uid, "note": "end"},
            ])
            save_data(LOG_FILE, trim_old(log))
            user_states.pop(uid)
            return await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ.", reply_markup=MAIN_MENU)
        # –®–∞–≥ 3: —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–Ω—Ü–∞
        if step == 3:
            try:
                dt1 = datetime.strptime(text, "%d.%m.%Y %H:%M")
            except ValueError:
                return await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            dt0 = data.get("start", dt1)
            log.extend([
                {"action": data["action"], "time": dt0.strftime("%Y-%m-%d %H:%M:%S"),
                 "user": uid, "note": "start"},
                {"action": data["action"], "time": dt1.strftime("%Y-%m-%d %H:%M:%S"),
                 "user": uid, "note": "end"},
            ])
            save_data(LOG_FILE, trim_old(log))
            user_states.pop(uid)
            return await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ.", reply_markup=MAIN_MENU)

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é":
        user_states[uid] = {"mode": "postfact", "step": 0, "data": {}}
        kb = [[KeyboardButton(a)] for a in ALL_ACTIONS] + [[KeyboardButton(CANCEL)]]
        return await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True)
        )

    # –°–æ–Ω: –Ω–∞—á–∞–ª–æ/–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ
    if text == "üõå –°–æ–Ω":
        if uid in active_sleeps:
            s = active_sleeps.pop(uid)["start"]
            dt0 = datetime.strptime(s, "%Y-%m-%d %H:%M:%S")
            dt1 = datetime.now()
            delta = dt1 - dt0
            h, rem = divmod(delta.seconds, 3600)
            m = rem//60
            log.extend([
                {"action": "–°–æ–Ω", "time": s, "user": uid, "note": "start"},
                {"action": "–°–æ–Ω", "time": dt1.strftime("%Y-%m-%d %H:%M:%S"),
                 "user": uid, "note": "end"},
            ])
            save_data(LOG_FILE, trim_old(log))
            return await update.message.reply_text(
                f"üò¥ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ: {h}—á {m}–º", reply_markup=MAIN_MENU
            )
        else:
            active_sleeps[uid] = {"start": now_str}
            return await update.message.reply_text("üò¥ –ó–∞—Å—ã–ø–∞–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ.", reply_markup=MAIN_MENU)

    # –ü—Ä–æ–≥—É–ª–∫–∞ –∏ –ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞
    if text in ("üå≥ –ü—Ä–æ–≥—É–ª–∫–∞", "üßª –ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞"):
        action = text.split()[1]
        if uid in active_walks:
            s = active_walks.pop(uid)["start"]
            dt0 = datetime.strptime(s, "%Y-%m-%d %H:%M:%S")
            dt1 = datetime.now()
            delta = dt1 - dt0
            h, rem = divmod(delta.seconds, 3600)
            m = rem//60
            log.extend([
                {"action": action, "time": s, "user": uid, "note": "start"},
                {"action": action, "time": dt1.strftime("%Y-%m-%d %H:%M:%S"),
                 "user": uid, "note": "end"},
            ])
            save_data(LOG_FILE, trim_old(log))
            return await update.message.reply_text(
                f"üö∂ {action} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {h}—á {m}–º", reply_markup=MAIN_MENU
            )
        else:
            active_walks[uid] = {"start": now_str}
            return await update.message.reply_text(f"üö∂ {action} –Ω–∞—á–∞–ª–∞—Å—å.", reply_markup=MAIN_MENU)

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        user_states[uid] = {"mode": "edit", "step": 0, "data": {}}
        kb = [[KeyboardButton(a)] for a in ALL_ACTIONS] + [[KeyboardButton(CANCEL)]]
        return await update.message.reply_text(
            "–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True)
        )

    if uid in user_states and user_states[uid]["mode"] == "edit":
        state = user_states[uid]
        step  = state["step"]
        data  = state["data"]
        # –®–∞–≥ 0: –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
        if step == 0:
            if text not in ALL_ACTIONS:
                user_states.pop(uid)
                return await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=MAIN_MENU)
            data["action"] = text
            state["step"] = 1
            entries = list_last_entries(log, text, 10)
            if not entries:
                user_states.pop(uid)
                return await update.message.reply_text(
                    "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=MAIN_MENU
                )
            msg = "\n".join(
                f"{i+1}. {e['time']} ({e.get('note','')})"
                for i,e in enumerate(entries)
            )
            data["entries"] = entries
            kb = [[KeyboardButton(str(i+1))] for i in range(len(entries))] + [[KeyboardButton(CANCEL)]]
            return await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n" + msg,
                reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True)
            )
        # –®–∞–≥ 1: –≤—ã–±–æ—Ä –∑–∞–ø–∏—Å–∏
        if step == 1:
            try:
                idx = int(text) - 1
                entries = data["entries"]
                if not (0 <= idx < len(entries)):
                    raise ValueError
            except:
                user_states.pop(uid)
                return await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=MAIN_MENU)
            data["idx"] = idx
            state["step"] = 2
            kb = [[KeyboardButton("1")],
                  [KeyboardButton("2")],
                  [KeyboardButton("3")],
                  [KeyboardButton(CANCEL)]]
            return await update.message.reply_text(
                "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?\n1. –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞\n"
                "2. –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞\n"
                "3. –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å",
                reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True)
            )
        # –®–∞–≥ 2: –≤—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
        if step == 2:
            choice = text
            entries = data["entries"]
            entry   = entries[data["idx"]]
            if choice == "3":
                # —É–¥–∞–ª—è–µ–º —ç—Ç—É –∑–∞–ø–∏—Å—å (start –∏–ª–∏ end)
                new_log = [e for e in log if not (
                    e["action"] == entry["action"] and e["time"] == entry["time"]
                )]
                save_data(LOG_FILE, trim_old(new_log))
                user_states.pop(uid)
                return await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.", reply_markup=MAIN_MENU)
            if choice in ("1","2"):
                data["field"] = "start" if choice == "1" else "end"
                state["step"]  = 3
                return await update.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–î–î.MM.YYYY –ß–ß:–ú–ú):",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton(CANCEL)]], resize_keyboard=True)
                )
            user_states.pop(uid)
            return await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=MAIN_MENU)
        # –®–∞–≥ 3: –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if step == 3:
            field   = data["field"]
            entries = data["entries"]
            idx     = data["idx"]
            old     = entries[idx]
            try:
                dt_new = datetime.strptime(text, "%d.%m.%Y %H:%M").strftime("%Y-%m-%d %H:%M:%S")
            except:
                user_states.pop(uid)
                return await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", reply_markup=MAIN_MENU)
            # –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ª–æ–≥–µ
            log2 = []
            for e in log:
                if e["action"] == old["action"] and e["time"] == old["time"] and e.get("note","") == field:
                    e["time"] = dt_new
                log2.append(e)
            save_data(LOG_FILE, trim_old(log2))
            user_states.pop(uid)
            return await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=MAIN_MENU)

    # –ü—Ä–æ—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –±–∏–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    for emo, act in VALID_ACTIONS:
        if text == f"{emo} {act}":
            check_rotation()
            log.append({"action": act, "time": now_str, "user": uid})
            save_data(LOG_FILE, trim_old(log))
            # –¥–ª—è –µ–¥—ã –∑–∞–ø—É—Å–∫–∞–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –±–∏–æ-—Ç–∞–π–º–µ—Ä
            if act == "–ï–¥–∞":
                context.job_queue.run_once(
                    send_bio_reminder, when=4*60,
                    data={"user_id": uid}
                )
            return await update.message.reply_text(f"{emo} {act} –∑–∞–ø–∏—Å–∞–Ω–æ.", reply_markup=MAIN_MENU)

    # –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=MAIN_MENU)

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á ===
def main():
    if not BOT_TOKEN or not ALLOWED_USER_IDS:
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –∏ ALLOWED_USER_IDS –≤ .env")
        return

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    jq = app.job_queue
    # –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø
    jq.run_daily(send_backup, time=time(hour=23, minute=59))

    # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏
    sched = settings["schedule"]
    for key, tstr in sched.items():
        hh, mm = map(int, tstr.split(":"))
        meal_time = datetime.combine(date.today(), time(hh, mm))
        # –µ–¥–∞: –∑–∞ 5 –º–∏–Ω—É—Ç
        eat_tm = (meal_time - timedelta(minutes=5)).time()
        jq.run_daily(send_eat_reminder, time=eat_tm)
        # –ø—Ä–æ–≥—É–ª–∫–∞: –∑–∞ 1h10min
        walk_tm = (meal_time - timedelta(hours=1, minutes=10)).time()
        jq.run_daily(send_walk_reminder, time=walk_tm)

    print("‚úÖ Bonita_Kani_Korso –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
