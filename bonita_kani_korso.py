#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bonita_Kani_Korso ‚Äî Telegram-–±–æ—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞ —â–µ–Ω–∫–∞:
- –°–æ–Ω, –ü—Ä–æ–≥—É–ª–∫–∞, –ò–≥—Ä—ã, –ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞: toggle start/stop (—Ñ–∏–∫—Å–∏—Ä—É–µ–º start/end –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
- –ï–¥–∞: –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å + –±–∏–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 4 –º–∏–Ω
- –¢—É–∞–ª–µ—Ç (üí© –∫–∞–∫–∞—à–∫–∏, üö∞ –º–æ—á–∏): –ø–æ–¥–º–µ–Ω—é –î–æ–º/–£–ª–∏—Ü–∞ ‚Üí (–î–æ–º) –ü–µ–ª–µ–Ω–∫–∞/–ú–∏–º–æ
- –ü–æ—Å—Ç—Ñ–∞–∫—Ç—É–º-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å –Ω–∞—á–∞–ª–æ–º/–∫–æ–Ω—Ü–æ–º –∏–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–ø–∏—Å–µ–π
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 2/5/10 –¥–Ω–µ–π:
    ‚Ä¢ –ï–¥–∞ ‚Äî –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–∑–∞–≤—Ç—Ä–∞–∫/–æ–±–µ–¥/—É–∂–∏–Ω/–ø–æ–∑–¥–Ω–∏–π —É–∂–∏–Ω)
    ‚Ä¢ –°–æ–Ω, –ü—Ä–æ–≥—É–ª–∫–∞ ‚Äî ¬´–¥–æ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏¬ª: –∫–æ–ª-–≤–æ + —Å—Ä. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    ‚Ä¢ –ò–≥—Ä—ã, –¢—É–∞–ª–µ—Ç ‚Äî ¬´–¥–æ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏¬ª: –∫–æ–ª-–≤–æ + —Å—Ä. –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2/5/10/15 –∑–∞–ø–∏—Å–µ–π
- CRUD –≤—ã—É—á–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ + –∫–æ–ª-–≤–æ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –µ–¥–∞ –∑–∞ 5 –º–∏–Ω, –ø—Ä–æ–≥—É–ª–∫–∞ –∑–∞ 1 —á 10 –º–∏–Ω, –±–∏–æ-–≤—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ 4 –º–∏–Ω
- –ë—ç–∫–∞–ø—ã (23:59), —Ä–æ—Ç–∞—Ü–∏—è (>10 –ú–ë), –æ—á–∏—Å—Ç–∫–∞ (>120 –¥–Ω)
- –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ —á–µ—Ä–µ–∑ .env
"""
import os, json
from datetime import datetime, date, timedelta, time
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()
BOT_TOKEN        = os.getenv("TELEGRAM_BOT_TOKEN")
ALLOWED_USER_IDS = [int(x) for x in os.getenv("ALLOWED_USER_IDS","").split(",") if x.strip().isdigit()]

# --- –§–∞–π–ª—ã ---
LOG_FILE      = "activity_log.json"
SETTINGS_FILE = "settings.json"
COMMANDS_FILE = "commands.json"

# --- –°–ø–∏—Å–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏ —ç–º–æ–¥–∑–∏ ---
ALL_ACTIONS = [
    "–°–æ–Ω","–ï–¥–∞","–ò–≥—Ä—ã","–ü—Ä–æ–≥—É–ª–∫–∞","–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞",
    "–¢—É–∞–ª–µ—Ç (–∫–∞–∫–∞—à–∫–∏)","–¢—É–∞–ª–µ—Ç (–º–æ—á–∏)"
]
VALID_ACTIONS = [
    ("üõå","–°–æ–Ω"),("üçΩÔ∏è","–ï–¥–∞"),("üåø","–ò–≥—Ä—ã"),
    ("üå≥","–ü—Ä–æ–≥—É–ª–∫–∞"),("üßª","–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞"),
    ("üí©","–¢—É–∞–ª–µ—Ç (–∫–∞–∫–∞—à–∫–∏)"),("üö∞","–¢—É–∞–ª–µ—Ç (–º–æ—á–∏)")
]
EMOJI_BY_ACTION = {act:emo for emo,act in VALID_ACTIONS}

# --- –ö–Ω–æ–ø–æ—á–Ω—ã–µ –º–µ–Ω—é ---
CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"
MAIN_MENU = ReplyKeyboardMarkup([
    ["üõå –°–æ–Ω","‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é","‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"],
    ["üçΩÔ∏è –ï–¥–∞","üåø –ò–≥—Ä—ã","‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
    ["üå≥ –ü—Ä–æ–≥—É–ª–∫–∞","üßª –ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞","üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
    ["üí© –¢—É–∞–ª–µ—Ç (–∫–∞–∫–∞—à–∫–∏)","üö∞ –¢—É–∞–ª–µ—Ç (–º–æ—á–∏)","üïì –ü–æ—Å–ª–µ–¥–Ω–∏–µ"],
    ["üí¨ –ö–æ–º–∞–Ω–¥—ã","üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è",CANCEL]
], resize_keyboard=True)
STATS_CHOICES = ReplyKeyboardMarkup([[KeyboardButton("2 –¥–Ω—è")],[KeyboardButton("5 –¥–Ω–µ–π")],[KeyboardButton("10 –¥–Ω–µ–π")],[KeyboardButton(CANCEL)]], resize_keyboard=True)
LAST_CHOICES  = ReplyKeyboardMarkup([[KeyboardButton(x)] for x in ("2","5","10","15")] + [[KeyboardButton(CANCEL)]], resize_keyboard=True)
CMD_MENU      = ReplyKeyboardMarkup([["–ü—Ä–æ—Å–º–æ—Ç—Ä","–î–æ–±–∞–≤–∏—Ç—å"],["–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å","–£–¥–∞–ª–∏—Ç—å"],[CANCEL]], resize_keyboard=True)
SETT_MENU     = ReplyKeyboardMarkup([["–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ","–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏"],[CANCEL]], resize_keyboard=True)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
default_settings = {
    "feedings_per_day":1,
    "schedule":{
        "breakfast":"08:00","lunch":"13:00",
        "dinner":"18:00","late_dinner":"23:00"
    }
}

# --- –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
def load_data(fn, default):
    if os.path.exists(fn):
        try:
            with open(fn,"r",encoding="utf-8") as f: return json.load(f)
        except json.JSONDecodeError: return default
    return default

def save_data(fn, data):
    with open(fn,"w",encoding="utf-8") as f: json.dump(data,f,ensure_ascii=False,indent=2)

settings = load_data(SETTINGS_FILE, default_settings)
commands = load_data(COMMANDS_FILE, [])

# --- –†–æ—Ç–∞—Ü–∏—è / –æ—á–∏—Å—Ç–∫–∞ ---
def trim_old(records, days=120):
    cut = datetime.now() - timedelta(days=days)
    return [e for e in records if datetime.strptime(e["time"],"%Y-%m-%d %H:%M:%S")>=cut]

def check_rotation():
    if os.path.exists(LOG_FILE) and os.path.getsize(LOG_FILE)>10*1024*1024:
        log = load_data(LOG_FILE, [])
        save_data(LOG_FILE, trim_old(log,days=20))

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ ---
user_states   = {}  # user_id -> {mode,step,data}
active_sleeps = {}  # user_id -> {"start":...}
active_walks  = {}
active_games  = {}
active_bios   = {}

# --- –£—Ç–∏–ª–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ ---
def average_time(times):
    if not times: return "‚Äî"
    tot=sum(dt.hour*60+dt.minute for dt in (datetime.strptime(t,"%Y-%m-%d %H:%M:%S") for t in times))
    avg=tot//len(times)
    return f"{avg//60:02d}:{avg%60:02d}"

def average_duration(mins_list):
    if not mins_list: return "‚Äî"
    avg=sum(mins_list)/len(mins_list)
    h=int(avg)//60; m=int(avg)%60
    return f"{h}—á {m}–º"

def list_last_entries(log, action, limit=10):
    ents=[e for e in log if e["action"]==action]
    ents.sort(key=lambda x:x["time"],reverse=True)
    return ents[:limit]

def extract_durations(log, action):
    pairs=[]; start=None
    for e in sorted(log,key=lambda x:x["time"]):
        if e["action"]==action and e.get("note")=="start":
            start=datetime.strptime(e["time"],"%Y-%m-%d %H:%M:%S")
        elif e["action"]==action and e.get("note")=="end" and start:
            end=datetime.strptime(e["time"],"%Y-%m-%d %H:%M:%S")
            mins=int((end-start).total_seconds()/60)
            pairs.append((mins,end.time()))
            start=None
    return pairs

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
def get_stats(log, days=2):
    cut=datetime.now()-timedelta(days=days)
    ent=[e for e in log if datetime.strptime(e["time"],"%Y-%m-%d %H:%M:%S")>=cut]
    sched=settings["schedule"]
    sch_t={k:datetime.strptime(v,"%H:%M").time() for k,v in sched.items()}
    periods=[("breakfast","–ó–∞–≤—Ç—Ä–∞–∫"),("lunch","–û–±–µ–¥"),("dinner","–£–∂–∏–Ω"),("late_dinner","–ü–æ–∑–¥–Ω–∏–π —É–∂–∏–Ω")]
    lines=[f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π:"]

    # –ï–¥–∞
    food={p:[] for p,_ in periods}
    for e in ent:
        if e["action"]!="–ï–¥–∞": continue
        t=datetime.strptime(e["time"],"%Y-%m-%d %H:%M:%S").time()
        if t<sch_t["lunch"]: food["breakfast"].append(e["time"])
        elif t<sch_t["dinner"]: food["lunch"].append(e["time"])
        elif t<sch_t["late_dinner"]: food["dinner"].append(e["time"])
        else: food["late_dinner"].append(e["time"])
    lines.append("\nüçΩÔ∏è –ï–¥–∞:")
    for p,label in periods:
        lines.append(f"  ‚Ä¢ {label}: {len(food[p])} —Ä–∞–∑, —Å—Ä. –≤ {average_time(food[p])}")

    # –°–æ–Ω –∏ –ü—Ä–æ–≥—É–ª–∫–∞
    for act,emoji in [("–°–æ–Ω","üõå"),("–ü—Ä–æ–≥—É–ª–∫–∞","üå≥")]:
        pairs=extract_durations(ent,act)
        grp={p:[] for p,_ in periods}
        for mins,tt in pairs:
            if tt<sch_t["lunch"]: grp["breakfast"].append(mins)
            elif tt<sch_t["dinner"]: grp["lunch"].append(mins)
            elif tt<sch_t["late_dinner"]: grp["dinner"].append(mins)
            else: grp["late_dinner"].append(mins)
        lines.append(f"\n{emoji} {act}-–¥–æ-–ø—Ä–∏—ë–º–∞:")
        for p,label in periods:
            arr=grp[p]
            lines.append(f"  ‚Ä¢ {label}: {len(arr)} —Ä–∞–∑, —Å—Ä. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {average_duration(arr)}")

    # –ò–≥—Ä—ã –∏ –¢—É–∞–ª–µ—Ç
    for act,emoji in [("–ò–≥—Ä—ã","üåø"),("–¢—É–∞–ª–µ—Ç (–∫–∞–∫–∞—à–∫–∏)","üí©"),("–¢—É–∞–ª–µ—Ç (–º–æ—á–∏)","üö∞")]:
        grp={p:[] for p,_ in periods}
        for e in ent:
            if e["action"]!=act: continue
            t=datetime.strptime(e["time"],"%Y-%m-%d %H:%M:%S").time()
            if t<sch_t["lunch"]: grp["breakfast"].append(e["time"])
            elif t<sch_t["dinner"]: grp["lunch"].append(e["time"])
            elif t<sch_t["late_dinner"]: grp["dinner"].append(e["time"])
            else: grp["late_dinner"].append(e["time"])
        lines.append(f"\n{emoji} {act}-–¥–æ-–ø—Ä–∏—ë–º–∞:")
        for p,label in periods:
            lines.append(f"  ‚Ä¢ {label}: {len(grp[p])} —Ä–∞–∑, —Å—Ä. –≤ {average_time(grp[p])}")

    return "\n".join(lines)

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def send_backup(context:ContextTypes.DEFAULT_TYPE):
    for uid in ALLOWED_USER_IDS:
        for fn in (LOG_FILE,SETTINGS_FILE,COMMANDS_FILE):
            if os.path.exists(fn):
                await context.bot.send_document(uid,open(fn,"rb"),caption="üì¶ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∫–æ–ø–∏—è")

async def send_eat_reminder(context:ContextTypes.DEFAULT_TYPE):
    for uid in ALLOWED_USER_IDS:
        await context.bot.send_message(uid,"üçΩÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 5 –º–∏–Ω ‚Äî –ø—Ä–∏—ë–º –ø–∏—â–∏.")

async def send_walk_reminder(context:ContextTypes.DEFAULT_TYPE):
    for uid in ALLOWED_USER_IDS:
        await context.bot.send_message(uid,"üö∂ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 1 —á 10 –º–∏–Ω ‚Äî –ø—Ä–æ–≥—É–ª–∫–∞.")

async def send_bio_reminder(context:ContextTypes.DEFAULT_TYPE):
    uid=context.job.data["user_id"]
    await context.bot.send_message(uid,"üßª –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –±–∏–æ-–≤—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ 4 –º–∏–Ω –ø–æ—Å–ª–µ –µ–¥—ã.")

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
async def start(update:Update, context:ContextTypes.DEFAULT_TYPE):
    uid=update.effective_user.id
    if uid not in ALLOWED_USER_IDS:
        return await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª–µ–∂—É –∑–∞ —Ä–µ–∂–∏–º–æ–º —â–µ–Ω–∫–∞ üê∂",reply_markup=MAIN_MENU)

async def handle_message(update:Update, context:ContextTypes.DEFAULT_TYPE):
    uid=update.effective_user.id
    if uid not in ALLOWED_USER_IDS:
        return await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    text=update.message.text.strip()
    now_str=datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log=load_data(LOG_FILE,[])

    # –û—Ç–º–µ–Ω–∞
    if text==CANCEL and uid in user_states:
        user_states.pop(uid)
        return await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞.",reply_markup=MAIN_MENU)

    # –¢—É–∞–ª–µ—Ç
    if text in ("üí© –¢—É–∞–ª–µ—Ç (–∫–∞–∫–∞—à–∫–∏)","üö∞ –¢—É–∞–ª–µ—Ç (–º–æ—á–∏)"):
        action=text.split(" ",1)[1]
        user_states[uid]={"mode":"toilet","step":0,"data":{"action":action}}
        kb=[[KeyboardButton("–î–æ–º")],[KeyboardButton("–£–ª–∏—Ü–∞")],[KeyboardButton(CANCEL)]]
        return await update.message.reply_text("–ì–¥–µ?",reply_markup=ReplyKeyboardMarkup(kb,resize_keyboard=True))
    if uid in user_states and user_states[uid]["mode"]=="toilet":
        st=user_states[uid]; step=st["step"]; data=st["data"]
        if step==0:
            if text=="–£–ª–∏—Ü–∞":
                log.append({"action":data["action"],"time":now_str,"user":uid,"note":"outside"})
                save_data(LOG_FILE,trim_old(log)); user_states.pop(uid)
                return await update.message.reply_text(f"‚úÖ {data['action']} –Ω–∞ —É–ª–∏—Ü–µ.",reply_markup=MAIN_MENU)
            if text=="–î–æ–º":
                st["step"]=1
                kb=[[KeyboardButton("–ü–µ–ª–µ–Ω–∫–∞")],[KeyboardButton("–ú–∏–º–æ")],[KeyboardButton(CANCEL)]]
                return await update.message.reply_text("–ü–µ–ª–µ–Ω–∫–∞ –∏–ª–∏ –º–∏–º–æ?",reply_markup=ReplyKeyboardMarkup(kb,resize_keyboard=True))
            user_states.pop(uid)
            return await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞.",reply_markup=MAIN_MENU)
        if step==1:
            note="home-pad" if text=="–ü–µ–ª–µ–Ω–∫–∞" else "home-miss"
            log.append({"action":data["action"],"time":now_str,"user":uid,"note":note})
            save_data(LOG_FILE,trim_old(log)); user_states.pop(uid)
            return await update.message.reply_text(f"‚úÖ {data['action']} –¥–æ–º–∞: {text.lower()}.",reply_markup=MAIN_MENU)

    # –°–æ–Ω toggle
    if text=="üõå –°–æ–Ω":
        if uid in active_sleeps:
            start=active_sleeps.pop(uid)["start"]
            dt0=datetime.strptime(start,"%Y-%m-%d %H:%M:%S")
            mins=int((datetime.now()-dt0).total_seconds()//60)
            log.extend([{"action":"–°–æ–Ω","time":start,"user":uid,"note":"start"},
                        {"action":"–°–æ–Ω","time":now_str,"user":uid,"note":"end"}])
            save_data(LOG_FILE,trim_old(log))
            return await update.message.reply_text(f"üò¥ –°–æ–Ω: {mins//60}—á {mins%60}–º",reply_markup=MAIN_MENU)
        active_sleeps[uid]={"start":now_str}
        return await update.message.reply_text("üò¥ –°–æ–Ω –Ω–∞—á–∞—Ç.",reply_markup=MAIN_MENU)

    # –ü—Ä–æ–≥—É–ª–∫–∞ toggle
    if text=="üå≥ –ü—Ä–æ–≥—É–ª–∫–∞":
        if uid in active_walks:
            start=active_walks.pop(uid)["start"]
            dt0=datetime.strptime(start,"%Y-%m-%d %H:%M:%S")
            mins=int((datetime.now()-dt0).total_seconds()//60)
            log.extend([{"action":"–ü—Ä–æ–≥—É–ª–∫–∞","time":start,"user":uid,"note":"start"},
                        {"action":"–ü—Ä–æ–≥—É–ª–∫–∞","time":now_str,"user":uid,"note":"end"}])
            save_data(LOG_FILE,trim_old(log))
            return await update.message.reply_text(f"üö∂ –ü—Ä–æ–≥—É–ª–∫–∞: {mins//60}—á {mins%60}–º",reply_markup=MAIN_MENU)
        active_walks[uid]={"start":now_str}
        return await update.message.reply_text("üö∂ –ü—Ä–æ–≥—É–ª–∫–∞ –Ω–∞—á–∞—Ç–∞.",reply_markup=MAIN_MENU)

    # –ò–≥—Ä—ã toggle
    if text=="üåø –ò–≥—Ä—ã":
        if uid in active_games:
            start=active_games.pop(uid)["start"]
            dt0=datetime.strptime(start,"%Y-%m-%d %H:%M:%S")
            mins=int((datetime.now()-dt0).total_seconds()//60)
            log.extend([{"action":"–ò–≥—Ä—ã","time":start,"user":uid,"note":"start"},
                        {"action":"–ò–≥—Ä—ã","time":now_str,"user":uid,"note":"end"}])
            save_data(LOG_FILE,trim_old(log))
            return await update.message.reply_text(f"üåø –ò–≥—Ä—ã: {mins//60}—á {mins%60}–º",reply_markup=MAIN_MENU)
        active_games[uid]={"start":now_str}
        return await update.message.reply_text("üåø –ò–≥—Ä—ã –Ω–∞—á–∞—Ç—ã.",reply_markup=MAIN_MENU)

    # –ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞ toggle
    if text=="üßª –ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞":
        if uid in active_bios:
            start=active_bios.pop(uid)["start"]
            dt0=datetime.strptime(start,"%Y-%m-%d %H:%M:%S")
            mins=int((datetime.now()-dt0).total_seconds()//60)
            log.extend([{"action":"–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞","time":start,"user":uid,"note":"start"},
                        {"action":"–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞","time":now_str,"user":uid,"note":"end"}])
            save_data(LOG_FILE,trim_old(log))
            return await update.message.reply_text(f"üßª –ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞: {mins//60}—á {mins%60}–º",reply_markup=MAIN_MENU)
        active_bios[uid]={"start":now_str}
        return await update.message.reply_text("üßª –ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞ –Ω–∞—á–∞—Ç–∞.",reply_markup=MAIN_MENU)

    # –ï–¥–∞
    if text=="üçΩÔ∏è –ï–¥–∞":
        check_rotation()
        log.append({"action":"–ï–¥–∞","time":now_str,"user":uid})
        save_data(LOG_FILE,trim_old(log))
        context.job_queue.run_once(send_bio_reminder, when=4*60, data={"user_id":uid})
        return await update.message.reply_text("üçΩÔ∏è –ï–¥–∞ –∑–∞–ø–∏—Å–∞–Ω–∞.",reply_markup=MAIN_MENU)

    # ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é
    if text=="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é":
        user_states[uid]={"mode":"postfact","step":0,"data":{}}
        kb=[[KeyboardButton(a)] for a in ALL_ACTIONS]+[[KeyboardButton(CANCEL)]]
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",reply_markup=ReplyKeyboardMarkup(kb,resize_keyboard=True))
        # –ü–æ—Å—Ç—Ñ–∞–∫—Ç—É–º-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    if uid in user_states and user_states[uid]["mode"] == "postfact":
        st = user_states[uid]
        step = st["step"]
        data = st["data"]

        # –®–∞–≥ 0: –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
        if step == 0:
            if text not in ALL_ACTIONS:
                user_states.pop(uid)
                return await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=MAIN_MENU)
            data["action"] = text
            st["step"] = 1
            return await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–î–î.MM.YYYY –ß–ß:–ú–ú):",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(CANCEL)]], resize_keyboard=True)
            )

        # –®–∞–≥ 1: –Ω–∞—á–∞–ª–æ
        if step == 1:
            try:
                dt0 = datetime.strptime(text, "%d.%m.%Y %H:%M")
            except ValueError:
                return await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –î–î.MM.YYYY –ß–ß:–ú–ú")
            data["start"] = dt0
            action = data["action"]

            if action == "–°–æ–Ω":
                st["step"] = 2
                return await update.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ —Å–Ω–∞ (–î–î.MM.YYYY –ß–ß:–ú–ú):",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton(CANCEL)]], resize_keyboard=True)
                )
            if action in ("–ü—Ä–æ–≥—É–ª–∫–∞", "–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞"):
                st["step"] = 3
                return await update.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö:",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton(CANCEL)]], resize_keyboard=True)
                )
            # –ï–¥–∞, –ò–≥—Ä—ã, –¢—É–∞–ª–µ—Ç
            log.append({
                "action": action,
                "time": dt0.strftime("%Y-%m-%d %H:%M:%S"),
                "user": uid
            })
            save_data(LOG_FILE, trim_old(log))
            user_states.pop(uid)
            return await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ.", reply_markup=MAIN_MENU)

        # –®–∞–≥ 2: –∫–æ–Ω–µ—Ü —Å–Ω–∞
        if step == 2:
            try:
                dt1 = datetime.strptime(text, "%d.%m.%Y %H:%M")
            except ValueError:
                return await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            dt0 = data["start"]
            log.extend([
                {"action": "–°–æ–Ω", "time": dt0.strftime("%Y-%m-%d %H:%M:%S"), "user": uid, "note": "start"},
                {"action": "–°–æ–Ω", "time": dt1.strftime("%Y-%m-%d %H:%M:%S"), "user": uid, "note": "end"},
            ])
            save_data(LOG_FILE, trim_old(log))
            user_states.pop(uid)
            return await update.message.reply_text("‚úÖ –°–æ–Ω –∑–∞–ø–∏—Å–∞–Ω.", reply_markup=MAIN_MENU)

        # –®–∞–≥ 3: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏/–±–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∏
        if step == 3:
            try:
                mins = int(text)
            except ValueError:
                return await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")
            dt0 = data["start"]
            dt1 = dt0 + timedelta(minutes=mins)
            log.extend([
                {"action": data["action"], "time": dt0.strftime("%Y-%m-%d %H:%M:%S"), "user": uid, "note": "start"},
                {"action": data["action"], "time": dt1.strftime("%Y-%m-%d %H:%M:%S"), "user": uid, "note": "end"},
            ])
            save_data(LOG_FILE, trim_old(log))
            user_states.pop(uid)
            return await update.message.reply_text("‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞.", reply_markup=MAIN_MENU)

    # –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç—Ñ–∞–∫—Ç—É–º-—Ä–µ–∂–∏–º–∞
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é":
        user_states[uid] = {"mode": "postfact", "step": 0, "data": {}}
        kb = [[KeyboardButton(a)] for a in ALL_ACTIONS] + [[KeyboardButton(CANCEL)]]
        return await update.message.reply_text("–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
    if text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        user_states[uid] = {"mode": "edit", "step": 0, "data": {}}
        kb = [[KeyboardButton(a)] for a in ALL_ACTIONS] + [[KeyboardButton(CANCEL)]]
        return await update.message.reply_text("–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

    if uid in user_states and user_states[uid]["mode"] == "edit":
        st = user_states[uid]
        step = st["step"]
        data = st["data"]

        # –®–∞–≥ 0: –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
        if step == 0:
            if text not in ALL_ACTIONS:
                user_states.pop(uid)
                return await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=MAIN_MENU)
            data["action"] = text
            entries = list_last_entries(log, text, limit=10)
            if not entries:
                user_states.pop(uid)
                return await update.message.reply_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=MAIN_MENU)
            data["entries"] = entries
            st["step"] = 1
            kb = [[KeyboardButton(str(i+1))] for i in range(len(entries))] + [[KeyboardButton(CANCEL)]]
            msg = "\n".join(f"{i+1}. {e['time']} ({e.get('note','')})" for i, e in enumerate(entries))
            return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä:\n"+msg, reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

        # –®–∞–≥ 1: –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞–¥ –∑–∞–ø–∏—Å—å—é
        if step == 1:
            try:
                idx = int(text) - 1
                entry = data["entries"][idx]
            except:
                user_states.pop(uid)
                return await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=MAIN_MENU)
            data["idx"] = idx
            st["step"] = 2
            kb = [[KeyboardButton("1")],[KeyboardButton("2")],[KeyboardButton("3")],[KeyboardButton(CANCEL)]]
            return await update.message.reply_text(
                "1. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª–æ\n2. –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω–µ—Ü\n3. –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å",
                reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True)
            )

        # –®–∞–≥ 2: –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
        if step == 2:
            choice = text
            entry = data["entries"][data["idx"]]
            if choice == "3":
                log2 = [e for e in log if not (e["action"] == entry["action"] and e["time"] == entry["time"])]
                save_data(LOG_FILE, trim_old(log2))
                user_states.pop(uid)
                return await update.message.reply_text("‚úÖ –£–¥–∞–ª–µ–Ω–æ.", reply_markup=MAIN_MENU)
            if choice in ("1","2"):
                data["field"] = "start" if choice=="1" else "end"
                st["step"] = 3
                return await update.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–î–î.MM.YYYY –ß–ß:–ú–ú):",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton(CANCEL)]], resize_keyboard=True)
                )
            user_states.pop(uid)
            return await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=MAIN_MENU)

        # –®–∞–≥ 3: –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if step == 3:
            field = data["field"]
            entry = data["entries"][data["idx"]]
            try:
                dt_new = datetime.strptime(text, "%d.%m.%Y %H:%M").strftime("%Y-%m-%d %H:%M:%S")
            except:
                user_states.pop(uid)
                return await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", reply_markup=MAIN_MENU)
            new_log = []
            for e in log:
                if e["action"] == entry["action"] and e["time"] == entry["time"] and e.get("note","") == field:
                    e["time"] = dt_new
                new_log.append(e)
            save_data(LOG_FILE, trim_old(new_log))
            user_states.pop(uid)
            return await update.message.reply_text("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=MAIN_MENU)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=STATS_CHOICES)
    if text in ("2 –¥–Ω—è","5 –¥–Ω–µ–π","10 –¥–Ω–µ–π"):
        days = int(text.split()[0])
        return await update.message.reply_text(get_stats(log, days), reply_markup=MAIN_MENU)

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    if text == "üïì –ü–æ—Å–ª–µ–¥–Ω–∏–µ":
        user_states[uid] = {"mode":"last","step":0,"data":{}}
        kb = [[KeyboardButton(a)] for a in ALL_ACTIONS] + [[KeyboardButton(CANCEL)]]
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

    if uid in user_states and user_states[uid]["mode"] == "last":
        st = user_states[uid]; step = st["step"]; data = st["data"]
        if step == 0:
            if text not in ALL_ACTIONS:
                user_states.pop(uid)
                return await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=MAIN_MENU)
            data["action"] = text
            st["step"] = 1
            return await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –ø–æ–∫–∞–∑–∞—Ç—å?", reply_markup=LAST_CHOICES)
        if step == 1:
            if text not in ("2","5","10","15"):
                user_states.pop(uid)
                return await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=MAIN_MENU)
            n = int(text)
            ents = list_last_entries(log, data["action"], limit=n)
            user_states.pop(uid)
            if not ents:
                return await update.message.reply_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=MAIN_MENU)
            msg = [f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {n} –¥–ª—è {data['action']}:"]
            msg += [f"{e['time']} {e.get('note','')}" for e in ents]
            return await update.message.reply_text("\n".join(msg), reply_markup=MAIN_MENU)

    # CRUD –≤—ã—É—á–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if text == "üí¨ –ö–æ–º–∞–Ω–¥—ã":
        user_states[uid] = {"mode":"cmd","step":0,"data":{}}
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=CMD_MENU)
    if uid in user_states and user_states[uid]["mode"] == "cmd":
        st = user_states[uid]; step = st["step"]; data = st["data"]
        if step == 0:
            if text == "–ü—Ä–æ—Å–º–æ—Ç—Ä":
                user_states.pop(uid)
                if not commands:
                    return await update.message.reply_text("–ù–µ—Ç –∫–æ–º–∞–Ω–¥.", reply_markup=MAIN_MENU)
                lines = ["üìö –í—ã—É—á–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"]
                lines += [f"/{c['command']}: {c['description']}" for c in commands]
                return await update.message.reply_text("\n".join(lines), reply_markup=MAIN_MENU)
            if text in ("–î–æ–±–∞–≤–∏—Ç—å","–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å","–£–¥–∞–ª–∏—Ç—å"):
                data["op"] = text; st["step"] = 1
                return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ /):")
            user_states.pop(uid)
            return await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=MAIN_MENU)
        if step == 1:
            name = text.strip(); data["name"] = name; op = data["op"]
            found = [c for c in commands if c["command"] == name]
            if op == "–î–æ–±–∞–≤–∏—Ç—å":
                st["step"] = 2
                return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
            if not found:
                user_states.pop(uid)
                return await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=MAIN_MENU)
            data["cmd"] = found[0]
            if op == "–£–¥–∞–ª–∏—Ç—å":
                commands.remove(data["cmd"]); save_data(COMMANDS_FILE, commands)
                user_states.pop(uid)
                return await update.message.reply_text("‚úÖ –£–¥–∞–ª–µ–Ω–æ.", reply_markup=MAIN_MENU)
            st["step"] = 2
            return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        if step == 2:
            desc = text.strip(); op = data["op"]
            if op == "–î–æ–±–∞–≤–∏—Ç—å":
                commands.append({"command":data["name"],"description":desc})
                res = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ."
            else:
                data["cmd"]["description"] = desc
                res = "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ."
            save_data(COMMANDS_FILE, commands)
            user_states.pop(uid)
            return await update.message.reply_text(res, reply_markup=MAIN_MENU)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=SETT_MENU)
    if uid in user_states and user_states[uid]["mode"] == "schedule":
        st = user_states[uid]; step = st["step"]; data = st["data"]
        times = ["breakfast","lunch","dinner","late_dinner"]
        labels = {"breakfast":"–∑–∞–≤—Ç—Ä–∞–∫","lunch":"–æ–±–µ–¥","dinner":"—É–∂–∏–Ω","late_dinner":"–ø–æ–∑–¥–Ω–∏–π —É–∂–∏–Ω"}
        try:
            datetime.strptime(text, "%H:%M")
        except:
            return await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú")
        data[times[step]] = text
        step += 1
        if step < 4:
            st["step"] = step
            return await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è {labels[times[step]]} (–ß–ß:–ú–ú):")
        settings["schedule"] = data; save_data(SETTINGS_FILE, settings)
        user_states.pop(uid)
        return await update.message.reply_text("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=MAIN_MENU)
    if text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        sched = settings["schedule"]
        msg = "\n".join(f"{k}: {v}" for k,v in sched.items())
        user_states[uid] = {"mode":"schedule","step":0,"data":{}}
        return await update.message.reply_text(f"–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{msg}\n\n–í–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞–∫–∞ (–ß–ß:–ú–ú):")
    if uid in user_states and user_states[uid]["mode"] == "set_feedings":
        try:
            n = int(text)
        except:
            return await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ.")
        settings["feedings_per_day"] = n; save_data(SETTINGS_FILE, settings)
        user_states.pop(uid)
        return await update.message.reply_text(f"‚úÖ –ü—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å: {n}", reply_markup=MAIN_MENU)
    if text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏":
        user_states[uid] = {"mode":"set_feedings","step":0,"data":{}}
        return await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å?", reply_markup=MAIN_MENU)

    # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
    if text == "üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è":
        for fn in (LOG_FILE, SETTINGS_FILE, COMMANDS_FILE):
            if os.path.exists(fn):
                await context.bot.send_document(update.effective_chat.id, open(fn, "rb"))
        return


    # –§–æ–ª–ª–±–µ–∫
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",reply_markup=MAIN_MENU)

def main():
    if not BOT_TOKEN or not ALLOWED_USER_IDS:
        print("‚ùå TELEGRAM_BOT_TOKEN –∏ ALLOWED_USER_IDS –≤ .env")
        return
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start",start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND,handle_message))
    jq = app.job_queue
    jq.run_daily(send_backup, time=time(hour=23,minute=59))
    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    sched=settings["schedule"]
    for _,tstr in sched.items():
        hh,mm=map(int,tstr.split(":"))
        mt=datetime.combine(date.today(),time(hh,mm))
        jq.run_daily(send_eat_reminder,time=(mt-timedelta(minutes=5)).time())
        jq.run_daily(send_walk_reminder,time=(mt-timedelta(hours=1,minutes=10)).time())
    print("‚úÖ Bonita_Kani_Korso –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__=="__main__":
    main()
