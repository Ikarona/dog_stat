#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bonita_Kani_Korso ‚Äî Telegram-–±–æ—Ç –¥–ª—è —â–µ–Ω–∫–∞ —Å –≥–∏–±–∫–∏–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:
- –°–æ–Ω (–∑–∞—Å—ã–ø–∞–Ω–∏–µ/–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ)
- –ï–¥–∞, –ò–≥—Ä—ã, –ü—Ä–æ–≥—É–ª–∫–∞, –ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞
- –ü–æ—Å—Ç—Ñ–∞–∫—Ç—É–º-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å —Ä—É—á–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 2/5/10 –¥–Ω–µ–π —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ —á–∏—Å–ª–∞ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:
    ‚Ä¢ –ï–¥–∞: –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    ‚Ä¢ –ü—Ä–æ–≥—É–ª–∫–∞: –∑–∞ 1 —á–∞—Å 10 –º–∏–Ω –¥–æ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–∏—â–∏
    ‚Ä¢ –ë–∏–æ-–≤—ã—Ö–æ–¥: —á–µ—Ä–µ–∑ 4 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±—ç–∫–∞–ø—ã, —Ä–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤, –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—à–µ 120 –¥–Ω–µ–π
- –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ —á–µ—Ä–µ–∑ .env
"""

import os, json
from datetime import datetime, timedelta, time, date
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ALLOWED_USER_IDS = [int(x) for x in os.getenv("ALLOWED_USER_IDS","").split(",") if x.strip().isdigit()]

# === –ü—É—Ç–∏ ===
LOG_FILE      = "activity_log.json"
SETTINGS_FILE = "settings.json"
COMMANDS_FILE = "commands.json"

# === –î–µ–π—Å—Ç–≤–∏—è –∏ —ç–º–æ–¥–∑–∏ ===
ALL_ACTIONS    = ["–°–æ–Ω","–ï–¥–∞","–ò–≥—Ä—ã","–ü—Ä–æ–≥—É–ª–∫–∞","–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞"]
VALID_ACTIONS  = [("üçΩÔ∏è","–ï–¥–∞"),("üåø","–ò–≥—Ä—ã"),("üå≥","–ü—Ä–æ–≥—É–ª–∫–∞"),("üßª","–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞")]
EMOJI_BY_ACTION= {"–°–æ–Ω":"üõå","–ï–¥–∞":"üçΩÔ∏è","–ò–≥—Ä—ã":"üåø","–ü—Ä–æ–≥—É–ª–∫–∞":"üå≥","–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞":"üßª"}

CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"

MAIN_MENU = ReplyKeyboardMarkup([
    ["üõå –°–æ–Ω","‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é","‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"],
    ["üçΩÔ∏è –ï–¥–∞","üåø –ò–≥—Ä—ã","‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
    ["üå≥ –ü—Ä–æ–≥—É–ª–∫–∞","üßª –ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞","üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
    ["üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", CANCEL]
], resize_keyboard=True)
STATS_CHOICES = ReplyKeyboardMarkup([[KeyboardButton("2 –¥–Ω—è")],[KeyboardButton("5 –¥–Ω–µ–π")],[KeyboardButton("10 –¥–Ω–µ–π")],[KeyboardButton(CANCEL)]], resize_keyboard=True)
SETTINGS_MENU = ReplyKeyboardMarkup([
    [KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏")],
    [KeyboardButton(CANCEL)]
], resize_keyboard=True)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ===
default_settings = {
    "feedings_per_day":1,
    "schedule":{
        "breakfast":"08:00",
        "lunch":"13:00",
        "dinner":"18:00",
        "late_dinner":"23:00"
    }
}

def load_data(fn, default):
    if os.path.exists(fn):
        try:
            with open(fn,"r",encoding="utf-8") as f: return json.load(f)
        except json.JSONDecodeError: return default
    return default

def save_data(fn, data):
    with open(fn,"w",encoding="utf-8") as f: json.dump(data,f,ensure_ascii=False,indent=2)

settings = load_data(SETTINGS_FILE, default_settings)

def trim_old(records, days=120):
    cutoff = datetime.now() - timedelta(days=days)
    return [e for e in records if datetime.strptime(e["time"],"%Y-%m-%d %H:%M:%S")>=cutoff]

def check_rotation():
    if os.path.exists(LOG_FILE) and os.path.getsize(LOG_FILE)>10*1024*1024:
        log = load_data(LOG_FILE,[])
        save_data(LOG_FILE, trim_old(log, days=20))

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
user_states   = {}  # user_id -> {"mode","step","data"}
active_walks  = {}  # user_id -> {"start":str}
active_sleeps = {}  # user_id -> {"start":str}

# === –ü–æ–º–æ—â–Ω–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
def average_time(times):
    if not times: return "‚Äî"
    total = sum(dt.hour*60+dt.minute for dt in (datetime.strptime(t,"%Y-%m-%d %H:%M:%S") for t in times))
    avg   = total//len(times)
    return f"{avg//60:02d}:{avg%60:02d}"

def get_stats(log, days=2):
    cutoff = datetime.now()-timedelta(days=days)
    entries = [e for e in log if datetime.strptime(e["time"],"%Y-%m-%d %H:%M:%S")>=cutoff]

    # 1) –ü–∏—Ç–∞–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    sched = settings["schedule"]
    sch_t = {k: datetime.strptime(v,"%H:%M").time() for k,v in sched.items()}
    groups = {"breakfast":[],"lunch":[],"dinner":[],"late_dinner":[]}
    for e in entries:
        if e["action"]!="–ï–¥–∞": continue
        t = datetime.strptime(e["time"],"%Y-%m-%d %H:%M:%S").time()
        if t<sch_t["lunch"]:       groups["breakfast"].append(e["time"])
        elif t<sch_t["dinner"]:     groups["lunch"].append(e["time"])
        elif t<sch_t["late_dinner"]: groups["dinner"].append(e["time"])
        else:                       groups["late_dinner"].append(e["time"])
    lines=[f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π:"]
    labels={"breakfast":"–ó–∞–≤—Ç—Ä–∞–∫","lunch":"–û–±–µ–¥","dinner":"–£–∂–∏–Ω","late_dinner":"–ü–æ–∑–¥–Ω–∏–π —É–∂–∏–Ω"}
    lines.append("üçΩÔ∏è –ï–¥–∞:")
    for key in ("breakfast","lunch","dinner","late_dinner"):
        times=groups[key]
        lines.append(f"  ‚Ä¢ {labels[key]}: {len(times)} —Ä–∞–∑, —Å—Ä. –≤ {average_time(times)}")

    # 2) –û—Å—Ç–∞–ª—å–Ω—ã–µ
    for action in ("–°–æ–Ω","–ò–≥—Ä—ã","–ü—Ä–æ–≥—É–ª–∫–∞","–ë–∏–æ-–ø—Ä–æ–≥—É–ª–∫–∞"):
        times=[e["time"] for e in entries if e["action"]==action]
        lines.append(f"\n{EMOJI_BY_ACTION[action]} {action}: {len(times)} —Ä–∞–∑, —Å—Ä. –≤ {average_time(times)}")

    return "\n".join(lines)

# === Handlers ===
async def start(update:Update, context:ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in ALLOWED_USER_IDS:
        return await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª–µ–∂—É –∑–∞ —Ä–µ–∂–∏–º–æ–º —â–µ–Ω–∫–∞ üê∂", reply_markup=MAIN_MENU)

async def handle_message(update:Update, context:ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in ALLOWED_USER_IDS:
        return await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    text    = update.message.text.strip()
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log     = load_data(LOG_FILE, [])

    # –û—Ç–º–µ–Ω–∞
    if text==CANCEL and uid in user_states:
        user_states.pop(uid)
        return await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=MAIN_MENU)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if text=="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥:", reply_markup=STATS_CHOICES)
    if text in ("2 –¥–Ω—è","5 –¥–Ω–µ–π","10 –¥–Ω–µ–π"):
        days = int(text.split()[0])
        return await update.message.reply_text(get_stats(log, days), reply_markup=MAIN_MENU)

    # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
    if text=="üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è":
        for fn in (LOG_FILE, SETTINGS_FILE, COMMANDS_FILE):
            if os.path.exists(fn):
                await context.bot.send_document(update.effective_chat.id, open(fn,"rb"))
        return

    # –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é, –°–æ–Ω, –ü—Ä–æ–≥—É–ª–∫–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç.–¥.
    # (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏, –≤–∫–ª—é—á–∞—é—â–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞—Ç—å –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –ø–æ—Å—Ç—Ñ–∞–∫—Ç—É–º)

    # –ü—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–µ–¥–∞, –∏–≥—Ä—ã)
    for emo, act in VALID_ACTIONS:
        if text==f"{emo} {act}":
            check_rotation()
            log.append({"action":act,"time":now_str,"user":uid})
            save_data(LOG_FILE, trim_old(log))
            # –µ—Å–ª–∏ —ç—Ç–æ –µ–¥–∞ ‚Äî —Å—Ä–∞–∑—É –ø–ª–∞–Ω–∏—Ä—É–µ–º –±–∏–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 4 –º–∏–Ω—É—Ç—ã
            if act=="–ï–¥–∞":
                context.job_queue.run_once(
                    send_bio_reminder,
                    when=4*60,
                    data={"user_id": uid}
                )
            return await update.message.reply_text(f"{emo} {act} –∑–∞–ø–∏—Å–∞–Ω–æ.", reply_markup=MAIN_MENU)

    # Fallback
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=MAIN_MENU)

# === –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ===
async def send_eat_reminder(context:ContextTypes.DEFAULT_TYPE):
    for uid in ALLOWED_USER_IDS:
        await context.bot.send_message(
            chat_id=uid,
            text="üçΩÔ∏è –ü–æ—Ä–∞ –∫–æ—Ä–º–∏—Ç—å —â–µ–Ω–∫–∞! ‚ùóÔ∏è –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."
        )

async def send_walk_reminder(context:ContextTypes.DEFAULT_TYPE):
    for uid in ALLOWED_USER_IDS:
        await context.bot.send_message(
            chat_id=uid,
            text="üö∂ –ü–æ—Ä–∞ –≥—É–ª—è—Ç—å —Å —â–µ–Ω–∫–æ–º! ‚ùóÔ∏è –ó–∞ 1 —á 10 –º–∏–Ω –¥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è."
        )

async def send_bio_reminder(context:ContextTypes.DEFAULT_TYPE):
    user_id = context.job.data["user_id"]
    await context.bot.send_message(
        chat_id=user_id,
        text="üßª –ü–æ—Ä–∞ –±–∏–æ-–≤—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –µ–¥—ã! (–ø—Ä–æ—à–ª–æ 4 –º–∏–Ω)"
    )

# === Entry point ===
def main():
    if not BOT_TOKEN or not ALLOWED_USER_IDS:
        print("‚ùå TELEGRAM_BOT_TOKEN –∏ ALLOWED_USER_IDS –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ .env")
        return

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # Handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # JobQueue: 
    # ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±—ç–∫–∞–ø—ã
    app.job_queue.run_daily(send_backup, time=time(hour=23,minute=59))
    # ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –µ–¥–µ –∑–∞ 5 –º–∏–Ω
    for key, tstr in settings["schedule"].items():
        hh, mm = map(int, tstr.split(":"))
        meal_time = time(hh, mm)
        # 5 –º–∏–Ω –¥–æ
        eat_tm = (datetime.combine(date.today(),meal_time) - timedelta(minutes=5)).time()
        app.job_queue.run_daily(send_eat_reminder, time=eat_tm)
        # 1 —á 10 –º–∏–Ω –¥–æ
        walk_tm = (datetime.combine(date.today(),meal_time) - timedelta(hours=1,minutes=10)).time()
        app.job_queue.run_daily(send_walk_reminder, time=walk_tm)

    print("‚úÖ Bonita_Kani_Korso –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__=="__main__":
    main()
